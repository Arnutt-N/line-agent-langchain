"""
HR Bot Tools - ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö HR Bot
"""
from langchain.tools import tool
import os
import json
import re
from typing import List, Dict, Any

def search_json_by_keywords(data: Dict[Any, Any], query: str) -> List[Dict[str, Any]]:
    """‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô JSON ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ keywords ‡πÅ‡∏•‡∏∞ fuzzy matching"""
    results = []
    query_lower = query.lower()
    
    def extract_text_recursive(obj, parent_key=""):
        """‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á JSON ‡πÅ‡∏ö‡∏ö recursive"""
        texts = []
        if isinstance(obj, dict):
            for key, value in obj.items():
                texts.extend(extract_text_recursive(value, key))
        elif isinstance(obj, list):
            for item in obj:
                texts.extend(extract_text_recursive(item, parent_key))
        elif isinstance(obj, str):
            texts.append((parent_key, obj))
        return texts
    
    def calculate_relevance_score(item: Dict[str, Any], query: str) -> float:
        """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á"""
        score = 0.0
        query_words = query.lower().split()
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÉ‡∏ô keywords (‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î)
        if 'keywords' in item:
            for keyword in item.get('keywords', []):
                for word in query_words:
                    if word in keyword.lower():
                        score += 10
                    elif keyword.lower() in query.lower():
                        score += 8
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÉ‡∏ô question
        if 'question' in item:
            questions = item['question'] if isinstance(item['question'], list) else [item['question']]
            for question in questions:
                for word in query_words:
                    if word in question.lower():
                        score += 5
                    # Exact phrase match
                    if query.lower() in question.lower():
                        score += 15
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÉ‡∏ô answer
        if 'answer' in item:
            for word in query_words:
                if word in item['answer'].lower():
                    score += 3
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÉ‡∏ô name, title
        for field in ['name', 'title', 'meaning']:
            if field in item:
                for word in query_words:
                    if word in str(item[field]).lower():
                        score += 7
        
        return score    
    # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÉ‡∏ô FAQ categories
    if 'categories' in data:
        for category in data['categories']:
            if 'faqs' in category:
                for faq in category['faqs']:
                    score = calculate_relevance_score(faq, query)
                    if score > 0:
                        result = {
                            'type': 'faq',
                            'category': category.get('name', ''),
                            'id': faq.get('id', ''),
                            'question': faq.get('question', ''),
                            'answer': faq.get('answer', ''),
                            'keywords': faq.get('keywords', []),
                            'link': faq.get('link', ''),
                            'links': faq.get('links', []),
                            'contacts': faq.get('contacts', {}),
                            'score': score
                        }
                        results.append(result)
    
    # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÉ‡∏ô core values
    if 'core_values' in data and 'values' in data['core_values']:
        for value in data['core_values']['values']:
            score = calculate_relevance_score(value, query)
            if score > 0:
                result = {
                    'type': 'core_value',
                    'id': value.get('id', ''),
                    'name': value.get('name', ''),
                    'name_en': value.get('name_en', ''),
                    'definition': value.get('definition', ''),
                    'keywords': value.get('keywords', []),
                    'behaviors': value.get('behaviors', []),
                    'score': score
                }
                results.append(result)
    
    # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÉ‡∏ô organizational culture
    if 'organizational_culture' in data and 'elements' in data['organizational_culture']:
        for element in data['organizational_culture']['elements']:
            score = calculate_relevance_score(element, query)
            if score > 0:
                result = {
                    'type': 'culture_element',
                    'id': element.get('id', ''),
                    'letter': element.get('letter', ''),
                    'word': element.get('word', ''),
                    'meaning': element.get('meaning', ''),
                    'description': element.get('description', ''),
                    'keywords': element.get('keywords', []),
                    'behaviors': element.get('behaviors', []),
                    'score': score
                }
                results.append(result)
    
    # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô
    results.sort(key=lambda x: x['score'], reverse=True)
    return results
@tool
def search_hr_faq_json(query: str) -> str:
    """‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå FAQ JSON"""
    try:
        faq_file = os.path.join("data", "json", "faq.json")
        if not os.path.exists(faq_file):
            return "‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå FAQ JSON"
        
        with open(faq_file, 'r', encoding='utf-8') as f:
            data = json.load(f)
        
        results = search_json_by_keywords(data, query)
        
        if not results:
            return "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡πÉ‡∏ô FAQ"
        
        # ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
        output = []
        output.append(f"üîç ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ FAQ ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö: '{query}'\n")
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î (‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 3 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£)
        for i, result in enumerate(results[:3]):
            output.append(f"üìã ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏µ‡πà {i+1}:")
            output.append(f"‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà: {result['category']}")
            
            # ‡πÅ‡∏™‡∏î‡∏á question(s)
            questions = result['question'] if isinstance(result['question'], list) else [result['question']]
            output.append(f"‚ùì ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°: {questions[0]}")
            
            output.append(f"‚úÖ ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö: {result['answer']}")
            
            # ‡πÅ‡∏™‡∏î‡∏á links ‡∏´‡∏≤‡∏Å‡∏°‡∏µ
            if result.get('link'):
                output.append(f"üîó ‡∏•‡∏¥‡∏á‡∏Å‡πå: {result['link']}")
            
            if result.get('links'):
                output.append("üîó ‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á:")
                for link in result['links'][:3]:  # ‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏Ñ‡πà 3 ‡∏•‡∏¥‡∏á‡∏Å‡πå‡πÅ‡∏£‡∏Å
                    output.append(f"   ‚Ä¢ {link.get('name', '')}: {link.get('url', '')}")
            
            output.append("‚îÄ" * 40)
        
        return "\n".join(output)
            
    except Exception as e:
        return f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ FAQ: {str(e)}"
@tool
def search_culture_values_json(query: str) -> str:
    """‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏±‡∏í‡∏ô‡∏ò‡∏£‡∏£‡∏°‡πÅ‡∏•‡∏∞‡∏Ñ‡πà‡∏≤‡∏ô‡∏¥‡∏¢‡∏°‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå JSON"""
    try:
        culture_file = os.path.join("data", "json", "culture_org.json")
        if not os.path.exists(culture_file):
            return "‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ß‡∏±‡∏í‡∏ô‡∏ò‡∏£‡∏£‡∏°‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£ JSON"
        
        with open(culture_file, 'r', encoding='utf-8') as f:
            data = json.load(f)
        
        results = search_json_by_keywords(data, query)
        
        if not results:
            return "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏±‡∏í‡∏ô‡∏ò‡∏£‡∏£‡∏°‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á"
        
        output = []
        output.append(f"üèõÔ∏è ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ß‡∏±‡∏í‡∏ô‡∏ò‡∏£‡∏£‡∏°‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö: '{query}'\n")
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏ô‡∏û‡∏ö
        for i, result in enumerate(results[:3]):
            if result['type'] == 'core_value':
                output.append(f"üíé ‡∏Ñ‡πà‡∏≤‡∏ô‡∏¥‡∏¢‡∏°‡∏ó‡∏µ‡πà {i+1}: {result['name']} ({result['name_en']})")
                output.append(f"üìñ ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏°‡∏≤‡∏¢: {result['definition']}")
                if result.get('behaviors'):
                    output.append("üé≠ ‡∏û‡∏§‡∏ï‡∏¥‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏µ‡πà‡∏û‡∏∂‡∏á‡∏õ‡∏£‡∏∞‡∏™‡∏á‡∏Ñ‡πå:")
                    for behavior in result['behaviors'][:4]:  # ‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏Ñ‡πà 4 ‡∏≠‡∏±‡∏ô‡πÅ‡∏£‡∏Å
                        output.append(f"   ‚Ä¢ {behavior}")
                
            elif result['type'] == 'culture_element':
                output.append(f"üé™ ‡∏ß‡∏±‡∏í‡∏ô‡∏ò‡∏£‡∏£‡∏°‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£: {result['letter']} - {result['word']}")
                output.append(f"üí´ ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏°‡∏≤‡∏¢: {result['meaning']}")
                output.append(f"üìù ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢: {result['description']}")
                        
            output.append("‚îÄ" * 40)
        
        return "\n".join(output)
            
    except Exception as e:
        return f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ß‡∏±‡∏í‡∏ô‡∏ò‡∏£‡∏£‡∏°‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£: {str(e)}"

@tool
def search_all_hr_data(query: str) -> str:
    """‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• HR ‡∏à‡∏≤‡∏Å‡∏ó‡∏∏‡∏Å‡πÅ‡∏´‡∏•‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (JSON ‡πÅ‡∏•‡∏∞ text files)"""
    try:
        results = []
        
        # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏à‡∏≤‡∏Å FAQ JSON
        faq_result = search_hr_faq_json(query)
        if "‚ùå" not in faq_result:
            results.append(faq_result)
        
        # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏à‡∏≤‡∏Å Culture/Values JSON
        culture_result = search_culture_values_json(query)
        if "‚ùå" not in culture_result:
            results.append(culture_result)
        
        if results:
            final_result = "\n\n".join(results)
            final_result += "\n\nüí° ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°:\nüìû 021415192 üìß hrdata@moj.go.th"
            return final_result
        else:
            return "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á\nüí° ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏≠‡∏∑‡πà‡∏ô ‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠ üìû 021415192"
            
    except Exception as e:
        return f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤: {str(e)}"
# Legacy functions for backward compatibility
@tool
def search_hr_faq(query: str) -> str:
    """‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå FAQ text (legacy)"""
    return search_hr_faq_json(query)  # Redirect to JSON version

@tool
def search_culture_org(query: str) -> str:
    """‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏±‡∏í‡∏ô‡∏ò‡∏£‡∏£‡∏°‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£ (legacy)"""
    return search_culture_values_json(query)  # Redirect to JSON version

@tool
def search_hr_policies(query: str) -> str:
    """‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢ HR ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á"""
    try:
        policy_file = os.path.join("data", "text", "policies.txt")
        if not os.path.exists(policy_file):
            return "‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢"
        
        with open(policy_file, 'r', encoding='utf-8') as f:
            content = f.read()
        
        if query.lower() in content.lower():
            pos = content.lower().find(query.lower())
            start = max(0, pos - 200)
            end = min(len(content), pos + 500)
            return f"‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á:\n{content[start:end]}..."
        else:
            return "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤"
            
    except Exception as e:
        return f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤: {str(e)}"

@tool
def check_leave_balance(employee_id: str) -> str:
    """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡∏±‡∏ô‡∏•‡∏≤‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠ (Mock data)"""
    mock_data = {
        "MOJ001": {"sick": 45, "vacation": 10, "personal": 30},
        "MOJ002": {"sick": 60, "vacation": 5, "personal": 45},
        "MOJ003": {"sick": 30, "vacation": 8, "personal": 20}
    }
    
    if employee_id in mock_data:
        balance = mock_data[employee_id]
        return f"""üìä ‡∏¢‡∏≠‡∏î‡∏ß‡∏±‡∏ô‡∏•‡∏≤‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠ ({employee_id}):
‚Ä¢ ‡∏•‡∏≤‡∏õ‡πà‡∏ß‡∏¢: {balance['sick']} ‡∏ß‡∏±‡∏ô
‚Ä¢ ‡∏•‡∏≤‡∏û‡∏±‡∏Å‡∏ú‡πà‡∏≠‡∏ô: {balance['vacation']} ‡∏ß‡∏±‡∏ô
‚Ä¢ ‡∏•‡∏≤‡∏Å‡∏¥‡∏à‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß: {balance['personal']} ‡∏ß‡∏±‡∏ô"""
    else:
        return "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô"