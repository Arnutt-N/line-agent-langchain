"""
Phase 1.3: р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ъ Database р╣Бр╕ер╕░ Categories
"""
import os
import sys
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from app.database import SessionLocal, engine
from app.models import Base, MessageCategory, MessageTemplate, LineUser, ChatMessage
from sqlalchemy import inspect, text
import sqlite3

def check_database_structure():
    """р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╣Вр╕Др╕гр╕Зр╕кр╕гр╣Йр╕▓р╕З Database"""
    print("ЁЯЧДя╕П Phase 1.3: р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ъ Database р╣Бр╕ер╕░ Categories")
    print("="*60)
    
    # р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╣Др╕Яр╕ер╣М database
    db_path = os.path.join(os.path.dirname(__file__), 'line_agent.db')
    if os.path.exists(db_path):
        print(f"тЬЕ Database file exists: {db_path}")
        file_size = os.path.getsize(db_path) / 1024 / 1024  # MB
        print(f"ЁЯУК Size: {file_size:.2f} MB")
    else:
        print("тЭМ Database file not found!")
        return False
    
    # р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ъ tables
    print("\nЁЯУЛ р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ъ Tables:")
    inspector = inspect(engine)
    tables = inspector.get_table_names()
    
    required_tables = [
        'line_users',
        'chat_messages',
        'event_logs',
        'message_categories',
        'message_templates',
        'template_usage_logs'
    ]
    
    for table in required_tables:
        if table in tables:
            print(f"  тЬЕ {table}")
        else:
            print(f"  тЭМ {table} - р╣Др╕бр╣Ир╕Юр╕Ъ!")
    
    return True

def check_existing_categories():
    """р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ъ Categories р╕Чр╕╡р╣Ир╕бр╕╡р╕нр╕вр╕╣р╣И"""
    print("\nЁЯУБ Categories р╕Чр╕╡р╣Ир╕бр╕╡р╕нр╕вр╕╣р╣И:")
    
    db = SessionLocal()
    try:
        categories = db.query(MessageCategory).all()
        
        if categories:
            print(f"р╕Юр╕Ъ {len(categories)} categories:")
            for cat in categories:
                print(f"  ЁЯУМ {cat.name} - {cat.description} ({cat.color})")
        else:
            print("  тЪая╕П р╕вр╕▒р╕Зр╣Др╕бр╣Ир╕бр╕╡ categories р╣Гр╕Фр╣Ж")
            
        return len(categories)
    finally:
        db.close()

def check_existing_templates():
    """р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ъ Templates р╕Чр╕╡р╣Ир╕бр╕╡р╕нр╕вр╕╣р╣И"""
    print("\nЁЯУЭ Templates р╕Чр╕╡р╣Ир╕бр╕╡р╕нр╕вр╕╣р╣И:")
    
    db = SessionLocal()
    try:
        # р╕Щр╕▒р╕Ъ templates р╕Хр╕▓р╕б category
        categories = db.query(MessageCategory).all()
        
        total_templates = 0
        for cat in categories:
            template_count = db.query(MessageTemplate).filter(
                MessageTemplate.category_id == cat.id
            ).count()
            if template_count > 0:
                print(f"  ЁЯУБ {cat.name}: {template_count} templates")
                total_templates += template_count
        
        print(f"\nЁЯУК р╕гр╕зр╕бр╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Ф: {total_templates} templates")
        return total_templates
    finally:
        db.close()

def check_database_stats():
    """р╣Бр╕кр╕Фр╕Зр╕кр╕Цр╕┤р╕Хр╕┤ Database"""
    print("\nЁЯУК р╕кр╕Цр╕┤р╕Хр╕┤ Database:")
    
    db = SessionLocal()
    try:
        users_count = db.query(LineUser).count()
        messages_count = db.query(ChatMessage).count()
        categories_count = db.query(MessageCategory).count()
        templates_count = db.query(MessageTemplate).count()
        
        print(f"  ЁЯСе Users: {users_count}")
        print(f"  ЁЯТм Messages: {messages_count}")
        print(f"  ЁЯУБ Categories: {categories_count}")
        print(f"  ЁЯУЭ Templates: {templates_count}")
        
    finally:
        db.close()

def create_summary():
    """р╕кр╕гр╕╕р╕Ыр╕Ьр╕ер╕Бр╕▓р╕гр╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ъ"""
    print("\n" + "="*60)
    print("ЁЯУК р╕кр╕гр╕╕р╕Ыр╕Ьр╕е Phase 1.3:")
    print("="*60)
    
    # р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕Чр╕╕р╕Бр╕нр╕вр╣Ир╕▓р╕З
    db_ok = check_database_structure()
    cat_count = check_existing_categories()
    temp_count = check_existing_templates()
    check_database_stats()
    
    print("\nЁЯОп р╕кр╕Цр╕▓р╕Щр╕░:")
    if db_ok and cat_count > 0 and temp_count > 0:
        print("тЬЕ Database р╕Юр╕гр╣Йр╕нр╕бр╣Гр╕Кр╣Йр╕Зр╕▓р╕Щ р╕бр╕╡ Categories р╣Бр╕ер╕░ Templates р╣Бр╕ер╣Йр╕з!")
        print("ЁЯТб р╣Др╕бр╣Ир╕Ир╕│р╣Ар╕Ыр╣Зр╕Щр╕Хр╣Йр╕нр╕Зр╕кр╕гр╣Йр╕▓р╕Зр╣Гр╕лр╕бр╣И р╕кр╕▓р╕бр╕▓р╕гр╕Цр╣Гр╕Кр╣Йр╕Зр╕▓р╕Щр╣Др╕Фр╣Йр╣Ар╕ер╕в")
    elif db_ok and cat_count == 0:
        print("тЪая╕П Database р╕Юр╕гр╣Йр╕нр╕б р╣Бр╕Хр╣Ир╕вр╕▒р╕Зр╣Др╕бр╣Ир╕бр╕╡ Categories")
        print("ЁЯТб р╕Др╕зр╕гр╕гр╕▒р╕Щ: python init_hr_templates.py")
    else:
        print("тЭМ р╕Хр╣Йр╕нр╕Зр╕кр╕гр╣Йр╕▓р╕З Database р╣Гр╕лр╕бр╣И")
        print("ЁЯТб р╕гр╕▒р╕Щ: python init_db.py")

if __name__ == "__main__":
    create_summary()
    print("\nтЬЕ Phase 1.3 - р╕Бр╕▓р╕гр╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╣Ар╕кр╕гр╣Зр╕Ир╕кр╕бр╕Ър╕╣р╕гр╕Ур╣М!")
