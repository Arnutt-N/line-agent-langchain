"""
üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå LINE Bot HR
Phase 1.1: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡∏∞ Dependencies
"""

import os
import sys
import subprocess
import json
from pathlib import Path

def print_status(item, status, details=""):
    """‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£"""
    icon = "‚úÖ" if status else "‚ùå"
    status_text = "‡∏û‡∏£‡πâ‡∏≠‡∏°" if status else "‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç"
    print(f"{icon} {item}: {status_text}")
    if details:
        print(f"   ‚îî‚îÄ {details}")

def check_project_structure():
    """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå"""
    print("\nüìÅ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå:")
    
    required_dirs = {
        "backend": "‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå Backend API",
        "frontend": "‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå Frontend UI",
        "env": "Virtual Environment",
        "backend/app": "‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÅ‡∏≠‡∏û‡∏´‡∏•‡∏±‡∏Å",
        "backend/data": "‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö RAG)"
    }
    
    for dir_path, description in required_dirs.items():
        exists = os.path.exists(dir_path)
        print_status(f"{dir_path}/", exists, description)
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå data ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
        if dir_path == "backend/data" and not exists:
            os.makedirs("backend/data/text", exist_ok=True)
            print("   ‚îî‚îÄ üî® ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå data/text/ ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ü‡∏•‡πå FAQ")

def check_key_files():
    """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç"""
    print("\nüìÑ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç:")
    
    key_files = {
        "backend/.env": "‡πÑ‡∏ü‡∏•‡πå Environment Variables",
        "backend/requirements.txt": "‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ Python packages",
        "backend/app/main.py": "‡πÑ‡∏ü‡∏•‡πå‡∏´‡∏•‡∏±‡∏Å FastAPI",
        "backend/app/models.py": "Database models",
        "backend/app/database.py": "Database configuration",
        "backend/line_agent.db": "SQLite database"
    }
    
    for file_path, description in key_files.items():
        exists = os.path.exists(file_path)
        print_status(file_path, exists, description)

def check_python_packages():
    """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Python packages ‡∏ó‡∏µ‡πà‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á"""
    print("\nüì¶ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Python Packages:")
    
    # Activate virtual environment first
    activate_script = r"env\Scripts\activate"
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö packages ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
    required_packages = [
        "fastapi",
        "uvicorn",
        "line-bot-sdk",
        "sqlalchemy",
        "langchain",
        "langchain-google-genai",
        "websockets",
        "python-dotenv"
    ]
    
    try:
        # Get installed packages
        result = subprocess.run(
            [r"env\Scripts\python.exe", "-m", "pip", "list", "--format=json"],
            capture_output=True,
            text=True
        )
        
        if result.returncode == 0:
            installed = json.loads(result.stdout)
            installed_names = {pkg['name'].lower() for pkg in installed}
            
            for package in required_packages:
                is_installed = package.lower() in installed_names
                print_status(package, is_installed)
                
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö packages ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö RAG
            print("\nüìö Packages ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö RAG (‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£):")
            optional_packages = ["pandas", "openpyxl", "python-docx", "PyPDF2"]
            for package in optional_packages:
                is_installed = package.lower() in installed_names
                status = "‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏•‡πâ‡∏ß" if is_installed else "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á (optional)"
                print(f"   {package}: {status}")
        else:
            print("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö packages ‡πÑ‡∏î‡πâ")
            
    except Exception as e:
        print(f"‚ùå Error: {e}")

def check_env_file():
    """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå .env"""
    print("\nüîê ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Environment Variables:")
    
    env_path = "backend/.env"
    if os.path.exists(env_path):
        print("‚úÖ ‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå .env")
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö keys ‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
        required_keys = [
            "LINE_ACCESS_TOKEN",
            "LINE_CHANNEL_SECRET", 
            "GEMINI_API_KEY"
        ]
        
        with open(env_path, 'r') as f:
            env_content = f.read()
            
        for key in required_keys:
            if key in env_content:
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡∏à‡∏£‡∏¥‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á‡πÄ‡∏õ‡πá‡∏ô placeholder
                if "your_" in env_content or "_here" in env_content:
                    print(f"‚ö†Ô∏è  {key}: ‡∏¢‡∏±‡∏á‡πÄ‡∏õ‡πá‡∏ô placeholder - ‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏™‡πà‡∏Ñ‡πà‡∏≤‡∏à‡∏£‡∏¥‡∏á")
                else:
                    print(f"‚úÖ {key}: ‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡πÅ‡∏•‡πâ‡∏ß")
            else:
                print(f"‚ùå {key}: ‡πÑ‡∏°‡πà‡∏û‡∏ö - ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°")
    else:
        print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå .env - ‡∏ï‡πâ‡∏≠‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà")
        print("   ‚îî‚îÄ üí° ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á: copy backend\\.env.example backend\\.env")

def create_summary():
    """‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö"""
    print("\n" + "="*60)
    print("üìä ‡∏™‡∏£‡∏∏‡∏õ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå:")
    print("="*60)
    
    print("""
‚úÖ ‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÅ‡∏•‡πâ‡∏ß:
- ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå‡∏´‡∏•‡∏±‡∏Å
- Virtual Environment
- ‡πÑ‡∏ü‡∏•‡πå Python ‡∏´‡∏•‡∏±‡∏Å
- Database SQLite

‚ö†Ô∏è  ‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥:
1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç .env file (‡πÉ‡∏™‡πà API keys ‡∏à‡∏£‡∏¥‡∏á)
2. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå data/text ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö FAQ (‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ)
3. ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á packages ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö RAG (optional)

üöÄ ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ:
- ‡∏£‡∏±‡∏ô: check_dependencies.bat ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
- ‡∏£‡∏±‡∏ô: fix_dependencies.bat ‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç dependencies
""")

if __name__ == "__main__":
    print("üîç LINE Bot HR - Project Status Check")
    print("="*60)
    
    check_project_structure()
    check_key_files()
    check_python_packages()
    check_env_file()
    create_summary()
    
    print("\n‚úÖ Phase 1.1 - ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå!")
    print("üí° ‡∏ñ‡∏±‡∏î‡πÑ‡∏õ: Phase 1.2 - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏á .env file")
