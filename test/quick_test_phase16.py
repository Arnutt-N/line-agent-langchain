"""
Quick Test - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
"""
import sqlite3
import os
import json
import sys
import io
sys.stdout = io.TextIOWrapper(sys.stdout.buffer, encoding='utf-8')

def test_database():
    """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Database"""
    print("1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Database")
    print("-" * 40)
    
    db_path = "line_agent.db"
    if os.path.exists(db_path):
        print(f"‚úÖ ‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå database: {db_path}")
        
        # ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        # ‡∏ô‡∏±‡∏ö categories
        cursor.execute("SELECT COUNT(*) FROM message_categories")
        cat_count = cursor.fetchone()[0]
        print(f"‚úÖ Categories: {cat_count} ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà")
        
        # ‡∏ô‡∏±‡∏ö templates
        cursor.execute("SELECT COUNT(*) FROM message_templates")
        temp_count = cursor.fetchone()[0]
        print(f"‚úÖ Templates: {temp_count} templates")
        
        # ‡πÅ‡∏™‡∏î‡∏á categories
        cursor.execute("SELECT name FROM message_categories")
        categories = cursor.fetchall()
        print("\n‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ó‡∏µ‡πà‡∏°‡∏µ:")
        for cat in categories:
            print(f"  - {cat[0]}")
        
        conn.close()
    else:
        print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå database")

def test_env_file():
    """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö .env"""
    print("\n2. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Environment Variables")
    print("-" * 40)
    
    if os.path.exists(".env"):
        print("‚úÖ ‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå .env")
        
        # ‡∏≠‡πà‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö keys
        with open(".env", "r") as f:
            content = f.read()
            
        required = ["LINE_ACCESS_TOKEN", "LINE_CHANNEL_SECRET", "GEMINI_API_KEY"]
        for key in required:
            if key in content:
                print(f"‚úÖ {key}: ‡∏°‡∏µ")
            else:
                print(f"‚ùå {key}: ‡πÑ‡∏°‡πà‡∏°‡∏µ")
    else:
        print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå .env")

def test_data_files():
    """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"""
    print("\n3. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• HR")
    print("-" * 40)
    
    data_files = [
        "data/text/faq_hr.txt",
        "data/text/policies_hr.txt",
        "data/text/benefits.txt"
    ]
    
    for file in data_files:
        if os.path.exists(file):
            size = os.path.getsize(file)
            print(f"‚úÖ {file} ({size} bytes)")
        else:
            print(f"‚ùå {file} - ‡πÑ‡∏°‡πà‡∏û‡∏ö")

def test_main_py():
    """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö main.py"""
    print("\n4. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö System Prompt")
    print("-" * 40)
    
    main_file = "app/main.py"
    if os.path.exists(main_file):
        with open(main_file, "r", encoding="utf-8") as f:
            content = f.read()
        
        if "‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢ HR ‡∏≠‡∏±‡∏à‡∏â‡∏£‡∏¥‡∏¢‡∏∞" in content:
            print("‚úÖ System Prompt ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡πÅ‡∏•‡πâ‡∏ß (V2)")
        else:
            print("‚ö†Ô∏è System Prompt ‡∏¢‡∏±‡∏á‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏Å‡πà‡∏≤")
    else:
        print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå main.py")

def main():
    print("üß™ Quick Test - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö HR Bot")
    print("="*60)
    
    test_database()
    test_env_file()
    test_data_files()
    test_main_py()
    
    print("\n" + "="*60)
    print("‚úÖ ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô")
    print("\nüí° ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ:")
    print("1. ‡∏£‡∏±‡∏ô RUN_SYSTEM.bat ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏∞‡∏ö‡∏ö")
    print("2. ‡πÄ‡∏õ‡∏¥‡∏î http://localhost:8000 (Backend)")
    print("3. ‡πÄ‡∏õ‡∏¥‡∏î http://localhost:5173 (Frontend)")
    print("4. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡πà‡∏≤‡∏ô LINE")

if __name__ == "__main__":
    main()
