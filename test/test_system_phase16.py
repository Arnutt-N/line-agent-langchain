"""
Phase 1.6: ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö HR Bot ‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô
"""
import os
import sys
import io
sys.stdout = io.TextIOWrapper(sys.stdout.buffer, encoding='utf-8')
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

import requests
import json
from datetime import datetime

# Configuration
BASE_URL = "http://localhost:8000"
LINE_WEBHOOK = f"{BASE_URL}/webhook"
API_BASE = f"{BASE_URL}/api"

def check_backend_running():
    """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ Backend ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà"""
    print("1Ô∏è‚É£ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Backend Server")
    print("-" * 40)
    
    try:
        response = requests.get(f"{BASE_URL}/")
        if response.status_code == 200:
            print("‚úÖ Backend server ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô")
            return True
        else:
            print(f"‚ö†Ô∏è Backend ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö status: {response.status_code}")
            return False
    except requests.exceptions.ConnectionError:
        print("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Backend ‡πÑ‡∏î‡πâ")
        print("üí° ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏±‡∏ô: RUN_SYSTEM.bat")
        return False
    except Exception as e:
        print(f"‚ùå Error: {e}")
        return False

def check_api_endpoints():
    """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö API Endpoints"""
    print("\n2Ô∏è‚É£ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö API Endpoints")
    print("-" * 40)
    
    endpoints = [
        ("/api/users", "GET", "‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ"),
        ("/api/templates", "GET", "Templates"),
        ("/api/categories", "GET", "Categories"),
        ("/api/statistics", "GET", "‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥")
    ]
    
    results = []
    for endpoint, method, desc in endpoints:
        try:
            url = f"{BASE_URL}{endpoint}"
            response = requests.request(method, url)
            
            if response.status_code == 200:
                print(f"‚úÖ {endpoint} - {desc}")
                results.append(True)
            else:
                print(f"‚ùå {endpoint} - Status: {response.status_code}")
                results.append(False)
        except Exception as e:
            print(f"‚ùå {endpoint} - Error: {str(e)[:50]}")
            results.append(False)
    
    return all(results)

def check_database_data():
    """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô Database"""
    print("\n3Ô∏è‚É£ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô Database")
    print("-" * 40)
    
    try:
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Categories
        response = requests.get(f"{API_BASE}/categories")
        if response.status_code == 200:
            categories = response.json()
            print(f"‚úÖ Categories: {len(categories)} ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà")
            
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Templates
        response = requests.get(f"{API_BASE}/templates")
        if response.status_code == 200:
            templates = response.json()
            print(f"‚úÖ Templates: {len(templates)} templates")
            
            # ‡∏ô‡∏±‡∏ö‡∏ï‡∏≤‡∏° type
            types = {}
            for t in templates:
                msg_type = t.get('message_type', 'unknown')
                types[msg_type] = types.get(msg_type, 0) + 1
            
            print("   Template Types:")
            for t, count in types.items():
                print(f"   - {t}: {count}")
        
        return True
    except Exception as e:
        print(f"‚ùå Error: {e}")
        return False

def test_webhook_simulation():
    """‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡πà‡∏≤‡∏ô webhook"""
    print("\n4Ô∏è‚É£ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Webhook (Simulation)")
    print("-" * 40)
    
    # Simulate LINE webhook payload
    test_payload = {
        "events": [
            {
                "type": "message",
                "timestamp": int(datetime.now().timestamp() * 1000),
                "source": {
                    "type": "user",
                    "userId": "TEST_USER_001"
                },
                "message": {
                    "type": "text",
                    "id": "test_msg_001",
                    "text": "‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö"
                }
            }
        ]
    }
    
    print("üì§ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö: '‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö'")
    
    try:
        # ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ signature ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö LINE webhook
        headers = {
            "Content-Type": "application/json",
            "X-Line-Signature": "test_signature"  # ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏à‡∏£‡∏¥‡∏á‡∏ï‡πâ‡∏≠‡∏á‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì signature
        }
        
        response = requests.post(
            LINE_WEBHOOK,
            json=test_payload,
            headers=headers
        )
        
        if response.status_code == 400:
            print("‚ö†Ô∏è Webhook ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö 400 - Invalid signature (‡∏õ‡∏Å‡∏ï‡∏¥‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö)")
        elif response.status_code == 200:
            print("‚úÖ Webhook ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö 200 OK")
        else:
            print(f"‚ùå Webhook ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö: {response.status_code}")
            
    except Exception as e:
        print(f"‚ùå Error: {e}")

def check_admin_panel():
    """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Admin Panel"""
    print("\n5Ô∏è‚É£ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Admin Panel")
    print("-" * 40)
    
    try:
        # Frontend ‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡∏£‡∏±‡∏ô‡∏ó‡∏µ‡πà port ‡∏≠‡∏∑‡πà‡∏ô
        frontend_url = "http://localhost:5173"
        response = requests.get(frontend_url)
        
        if response.status_code == 200:
            print(f"‚úÖ Frontend Admin Panel: {frontend_url}")
            print("   - Dashboard: /")
            print("   - Templates: /templates.html")
        else:
            print(f"‚ö†Ô∏è Frontend status: {response.status_code}")
            
    except requests.exceptions.ConnectionError:
        print("‚ö†Ô∏è Frontend ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ô")
        print("üí° ‡∏ñ‡πâ‡∏≤‡∏£‡∏±‡∏ô RUN_SYSTEM.bat ‡πÅ‡∏•‡πâ‡∏ß Frontend ‡∏à‡∏∞‡∏£‡∏±‡∏ô‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥")
    except Exception as e:
        print(f"‚ùå Error: {e}")

def test_hr_scenarios():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö scenarios HR"""
    print("\n6Ô∏è‚É£ HR Scenarios ‡∏ó‡∏µ‡πà‡∏Ñ‡∏ß‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö")
    print("-" * 40)
    
    test_cases = [
        ("‡∏ó‡∏±‡∏Å‡∏ó‡∏≤‡∏¢", ["‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö", "‡∏´‡∏ß‡∏±‡∏î‡∏î‡∏µ", "Hello"]),
        ("‡∏Å‡∏≤‡∏£‡∏•‡∏≤", ["‡∏Ç‡∏≠‡∏ó‡∏£‡∏≤‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏Å‡∏≤‡∏£‡∏•‡∏≤‡∏õ‡πà‡∏ß‡∏¢", "‡∏•‡∏≤‡∏û‡∏±‡∏Å‡∏ú‡πà‡∏≠‡∏ô‡πÑ‡∏î‡πâ‡∏Å‡∏µ‡πà‡∏ß‡∏±‡∏ô", "‡∏ß‡∏¥‡∏ò‡∏µ‡∏•‡∏≤‡∏Å‡∏¥‡∏à"]),
        ("‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏¥‡∏Å‡∏≤‡∏£", ["‡πÄ‡∏ö‡∏¥‡∏Å‡∏Ñ‡πà‡∏≤‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•", "‡∏Ñ‡πà‡∏≤‡πÄ‡∏•‡πà‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ö‡∏∏‡∏ï‡∏£", "‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°"]),
        ("‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ", ["‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠ HR", "‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏ö‡∏ö‡∏ü‡∏≠‡∏£‡πå‡∏°", "‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡∏±‡∏ô‡∏•‡∏≤ MOJ001"])
    ]
    
    print("üìù Test Cases:")
    for category, messages in test_cases:
        print(f"\n{category}:")
        for msg in messages:
            print(f"  - {msg}")
    
    print("\nüí° ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏î‡∏™‡∏≠‡∏ö:")
    print("1. ‡πÄ‡∏õ‡∏¥‡∏î LINE app")
    print("2. Add Friend: @your_bot_id")
    print("3. ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≤‡∏° test cases")
    print("4. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö")

def create_test_report():
    """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö"""
    print("\n" + "="*60)
    print("üìä ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö Phase 1.6")
    print("="*60)
    
    # ‡∏£‡∏ß‡∏ö‡∏£‡∏ß‡∏°‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö
    results = {
        "Backend Server": check_backend_running(),
        "API Endpoints": False,  # ‡∏à‡∏∞‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏à‡∏≤‡∏Å‡∏ú‡∏•‡∏à‡∏£‡∏¥‡∏á
        "Database Data": False,
        "Webhook": False,
        "Admin Panel": False
    }
    
    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô
    passed = sum(1 for v in results.values() if v)
    total = len(results)
    percentage = (passed / total) * 100
    
    print(f"\n‚úÖ ‡∏ú‡πà‡∏≤‡∏ô: {passed}/{total} ({percentage:.0f}%)")
    
    if percentage == 100:
        print("\nüéâ ‡∏£‡∏∞‡∏ö‡∏ö‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô 100%!")
    elif percentage >= 80:
        print("\n‚úÖ ‡∏£‡∏∞‡∏ö‡∏ö‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô (‡∏°‡∏µ‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á)")
    else:
        print("\n‚ö†Ô∏è ‡∏£‡∏∞‡∏ö‡∏ö‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏° ‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤")
    
    # ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
    print("\nüí° ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ:")
    if not results["Backend Server"]:
        print("1. ‡∏£‡∏±‡∏ô RUN_SYSTEM.bat ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏∞‡∏ö‡∏ö")
    else:
        print("1. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡πà‡∏≤‡∏ô LINE")
        print("2. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Admin Panel")
        print("3. ‡∏î‡∏π logs ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô")

def main():
    print("üß™ Phase 1.6: ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö HR Bot ‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô")
    print("="*60)
    print(f"‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏î‡∏™‡∏≠‡∏ö: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print("="*60)
    
    # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏™‡πà‡∏ß‡∏ô
    backend_ok = check_backend_running()
    
    if backend_ok:
        check_api_endpoints()
        check_database_data()
        test_webhook_simulation()
        check_admin_panel()
        test_hr_scenarios()
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô
    create_test_report()
    
    print("\n‚úÖ Phase 1.6 - ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå!")

if __name__ == "__main__":
    main()
