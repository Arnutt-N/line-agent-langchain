#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Test script for JSON search functionality
‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå JSON ‡πÉ‡∏´‡∏°‡πà
"""
import os
import sys
import json

# Add the backend app to Python path
current_dir = os.path.dirname(os.path.abspath(__file__))
backend_dir = os.path.join(current_dir, 'backend')
sys.path.insert(0, backend_dir)

def test_json_files():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå JSON"""
    print("[TEST] ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå JSON...")
    
    # Test FAQ JSON
    faq_file = os.path.join("backend", "data", "json", "faq.json")
    if os.path.exists(faq_file):
        print("[OK] ‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå faq.json")
        try:
            with open(faq_file, 'r', encoding='utf-8') as f:
                faq_data = json.load(f)
                categories = faq_data.get('categories', [])
                total_faqs = sum(len(cat.get('faqs', [])) for cat in categories)
                print(f"   - ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô categories: {len(categories)}")
                print(f"   - ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô FAQ ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {total_faqs}")
        except Exception as e:
            print(f"   [ERROR] Error reading FAQ JSON: {e}")
    else:
        print("[ERROR] ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå faq.json")
    
    # Test Culture JSON
    culture_file = os.path.join("backend", "data", "json", "culture_org.json")
    if os.path.exists(culture_file):
        print("[OK] ‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå culture_org.json")
        try:
            with open(culture_file, 'r', encoding='utf-8') as f:
                culture_data = json.load(f)
                core_values = culture_data.get('core_values', {}).get('values', [])
                culture_elements = culture_data.get('organizational_culture', {}).get('elements', [])
                print(f"   - ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô core values: {len(core_values)}")
                print(f"   - ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô culture elements: {len(culture_elements)}")
        except Exception as e:
            print(f"   [ERROR] Error reading Culture JSON: {e}")
    else:
        print("[ERROR] ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå culture_org.json")

def test_search_functions():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤"""
    print("\n[TEST] ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤...")
    
    try:
        from app.hr_tools import search_hr_faq_json, search_culture_values_json, search_all_hr_data
        print("[OK] Import ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
        
        # Test FAQ search
        print("\n[FAQ] ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ FAQ:")
        test_queries = ["‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠", "‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå", "‡∏•‡∏≤‡∏õ‡πà‡∏ß‡∏¢"]
        
        for query in test_queries:
            print(f"\n[SEARCH] ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤: '{query}'")
            try:
                result = search_hr_faq_json(query)
                if "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•" not in result and "Error" not in result:
                    print("[OK] ‡∏û‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå")
                    lines = result.split('\n')
                    for line in lines[:3]:
                        if line.strip() and not line.startswith('üîç'):
                            print(f"   {line}")
                else:
                    print("[NOT_FOUND] ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå")
            except Exception as e:
                print(f"[ERROR] {e}")
        
        # Test Culture search  
        print("\n[CULTURE] ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ß‡∏±‡∏í‡∏ô‡∏ò‡∏£‡∏£‡∏°‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£:")
        culture_queries = ["‡∏™‡∏∏‡∏à‡∏£‡∏¥‡∏ï", "JUSTICE", "‡∏Ñ‡πà‡∏≤‡∏ô‡∏¥‡∏¢‡∏°"]
        
        for query in culture_queries:
            print(f"\n[SEARCH] ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤: '{query}'")
            try:
                result = search_culture_values_json(query)
                if "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•" not in result and "Error" not in result:
                    print("[OK] ‡∏û‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå")
                    lines = result.split('\n')
                    for line in lines[:3]:
                        if line.strip() and not line.startswith('üèõÔ∏è'):
                            print(f"   {line}")
                else:
                    print("[NOT_FOUND] ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå")
            except Exception as e:
                print(f"[ERROR] {e}")
                
    except ImportError as e:
        print(f"[ERROR] ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ import ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô: {e}")
        print("[INFO] ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Python path ‡πÅ‡∏•‡∏∞ dependencies")

def main():
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å"""
    print("===== ‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• HR ‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå JSON =====")
    
    # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÑ‡∏õ‡∏¢‡∏±‡∏á directory ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
    os.chdir(current_dir)
    print(f"[INFO] Working directory: {current_dir}")
    
    # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå JSON
    test_json_files()
    
    # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
    test_search_functions()
    
    print("\n" + "=" * 50)
    print("[DONE] ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!")

if __name__ == "__main__":
    main()
